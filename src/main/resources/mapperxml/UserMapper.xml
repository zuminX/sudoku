<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sudoku.project.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.sudoku.project.model.entity.User">
    <!--@Table `user`-->
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="username" jdbcType="VARCHAR" property="username"/>
    <result column="password" jdbcType="VARCHAR" property="password"/>
    <result column="nickname" jdbcType="VARCHAR" property="nickname"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="recent_login_time" jdbcType="TIMESTAMP" property="recentLoginTime"/>
    <result column="enabled" jdbcType="TINYINT" property="enabled"/>
  </resultMap>
  <sql id="Base_Column_List">
    id,
    username,
    `password`,
    nickname,
    create_time,
    recent_login_time,
    enabled
  </sql>

  <resultMap extends="BaseResultMap" id="UserWithRole" type="com.sudoku.project.model.entity.User">
    <collection ofType="com.sudoku.project.model.entity.Role" property="roles">
      <id column="role_id" property="id"/>
      <result column="role_name" property="name"/>
      <result column="role_name_zh" property="nameZh"/>
    </collection>
  </resultMap>

  <select id="selectByUsername" resultMap="BaseResultMap">
    select *
    from `user`
    where username = #{username,jdbcType=VARCHAR}
  </select>

  <select id="selectWithRoleByUsername" resultMap="UserWithRole">
    select *
    from user_role_merge_user_role_v
    where username = #{username,jdbcType=VARCHAR}
  </select>

  <update id="updateRecentLoginTimeById">
    update `user`
    set recent_login_time=#{loginTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateModifyById">
    update `user`
    <set>
      <if test="user.username != null">
        username = #{user.username,jdbcType=VARCHAR},
      </if>
      <if test="user.nickname != null">
        nickname = #{user.nickname,jdbcType=VARCHAR},
      </if>
      <if test="user.createTime != null">
        create_time = #{user.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="user.recentLoginTime != null">
        recent_login_time = #{user.recentLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="user.enabled != null">
        enabled = #{user.enabled,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{user.id,jdbcType=INTEGER}
  </update>

  <select id="selectAllWithRole" resultMap="UserWithRole">
    select *
    from user_role_merge_user_role_v
  </select>

  <sql id="ConditionSearchData">
    WITH data as (
    select *
    from user_role_merge_user_role_v
    <where>
      <if test="user.createTimeRange != null">
        create_time <![CDATA[>=]]> #{user.createTimeRange.start,jdbcType=TIMESTAMP}
        and create_time <![CDATA[<=]]> #{user.createTimeRange.end,jdbcType=TIMESTAMP}
      </if>
      <if test="user.recentLoginTimeRange != null">
        and recent_login_time <![CDATA[>=]]> #{user.recentLoginTimeRange.start,jdbcType=TIMESTAMP}
        and recent_login_time <![CDATA[<=]]> #{user.recentLoginTimeRange.end,jdbcType=TIMESTAMP}
      </if>
      <if test="user.username != null">
        and username like concat('%', #{user.username,jdbcType=VARCHAR}, '%')
      </if>
      <if test="user.nickname != null">
        and nickname like concat('%', #{user.username,jdbcType=VARCHAR}, '%')
      </if>
      <if test="user.enabled != null">
        and enabled = #{user.enabled,jdbcType=BOOLEAN}
      </if>
      <if test="user.roleNameList != null and user.roleNameList.size() > 0">
        role_name_zh in
        <foreach close=")" collection="user.roleNameList" item="name" open="(" separator=",">
          #{name,jdbcType=VARCHAR}
        </foreach>
      </if>
    </where>
    )
  </sql>

  <select id="selectByConditionWithRole" resultMap="UserWithRole">
    <include refid="ConditionSearchData"/>
    select *
    from data
    <where>
      <if test="user.roleNameList != null and user.roleNameList.size() > 0">
        id in (
          select ids.u_id
          from (
                 select user_role.id as u_id, count(1) as role_count
                 from user_role_merge_user_role_v user_role
                 group by u_id) as ids
          where ids.role_count = ${user.roleNameList.size()})
      </if>
    </where>
  </select>

  <select id="selectByNameWithRole" resultMap="UserWithRole">
    select *
    from user_role_merge_user_role_v
    <where>
      <if test="name != null and name != ''">
        username like concat('%', #{name,jdbcType=VARCHAR}, '%')
          or nickname like concat('%', #{name,jdbcType=VARCHAR}, '%')
      </if>
    </where>
  </select>

  <select id="countNewUserByDateBetween" resultType="java.lang.Integer">
    select count(1)
    from user
    where DATE(`create_time`) <![CDATA[>=]]> DATE(#{startDate,jdbcType=DATE})
      and DATE(`create_time`) <![CDATA[<]]> DATE(#{endDate,jdbcType=DATE})
  </select>

  <select id="countRecentLoginUserByDateBetween" resultType="java.lang.Integer">
    select count(1)
    from user
    where DATE(`recent_login_time`) <![CDATA[>=]]> DATE(#{startDate,jdbcType=DATE})
      and DATE(`recent_login_time`) <![CDATA[<]]> DATE(#{endDate,jdbcType=DATE})
  </select>

  <select id="count" resultType="java.lang.Integer">
    select count(1)
    from user
  </select>
</mapper>