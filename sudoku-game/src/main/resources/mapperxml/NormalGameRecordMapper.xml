<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sudoku.game.mapper.NormalGameRecordMapper">
  <resultMap id="BaseResultMap" type="com.sudoku.game.model.entity.NormalGameRecord">
    <!--@Table normal_game_record-->
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="input_matrix" jdbcType="CHAR" property="inputMatrix"/>
    <result column="answer_situation" jdbcType="TINYINT" property="answerSituation"/>
    <result column="user_id" jdbcType="INTEGER" property="userId"/>
    <result column="sudoku_record_id" jdbcType="INTEGER" property="sudokuRecordId"/>
  </resultMap>

  <resultMap type="com.sudoku.game.model.result.NormalGameRecordResultForHistory" id="NormalGameRecordResultForHistoryMap">
    <result column="input_matrix" property="inputMatrix"/>
    <result column="answer_situation" property="answerSituation"/>
    <association property="sudokuRecordResult" javaType="com.sudoku.game.model.result.SudokuRecordResultForHistory">
      <result column="sudoku_matrix" property="sudokuMatrix"/>
      <result column="sudoku_holes" property="sudokuHoles"/>
      <result column="start_time" property="startTime"/>
      <result column="end_time" property="endTime"/>
      <result column="name" property="sudokuLevelName"/>
    </association>
  </resultMap>

  <resultMap id="RankItemBOMap" type="com.sudoku.common.rank.RankItemBO">
    <result column="sudoku_level_id" property="sudokuLevelId"/>
    <collection property="rankItemDataList" ofType="com.sudoku.common.rank.RankItemDataBO">
      <result column="username" property="username"/>
      <result column="data" property="data"/>
    </collection>
  </resultMap>

  <resultMap id="UserGameInformationVOMap" type="com.sudoku.game.model.vo.UserGameInformationVO">
    <result column="total" property="total"/>
    <result column="correct_number" property="correctNumber"/>
    <result column="average_spend_time" property="averageSpendTime"/>
    <result column="min_spend_time" property="minSpendTime"/>
    <result column="max_spend_time" property="maxSpendTime"/>
    <result column="sudoku_level_name" property="sudokuLevelName"/>
  </resultMap>

  <sql id="Base_Column_List">
    id,
    input_matrix,
    answer_situation,
    user_id,
    sudoku_record_id
  </sql>

  <sql id="SelectRanking">
    select any_value(`data`) as data, `sudoku_level_id`, any_value(`username`) as username, any_value(`rn`) as rn
    from tmp
    where
    rn  <![CDATA[<=]]> ${limitNumber}
  </sql>

  <select id="findByUserIdOrderByStartTimeDesc" resultMap="NormalGameRecordResultForHistoryMap">
    select ngr.input_matrix,
           ngr.answer_situation,
           sr.sudoku_matrix,
           sr.sudoku_holes,
           sr.start_time,
           sr.end_time,
           sl.name
    from normal_game_record ngr
           inner join sudoku_record sr on ngr.sudoku_record_id = sr.id
           inner join sudoku_level sl on sr.sudoku_level_id = sl.id
    where user_id = #{userId,jdbcType=INTEGER}
    order by start_time desc
  </select>


  <select id="findByUserIdOrderByStartTimeDescIgnoreOneSudokuRecord" resultMap="NormalGameRecordResultForHistoryMap">
    select ngr.input_matrix,
           ngr.answer_situation,
           sr.sudoku_matrix,
           sr.sudoku_holes,
           sr.start_time,
           sr.end_time,
           sl.name
    from normal_game_record ngr
           inner join sudoku_record sr on ngr.sudoku_record_id = sr.id
           inner join sudoku_level sl on sr.sudoku_level_id = sl.id
    where user_id = #{userId,jdbcType=INTEGER}
      and sr.id != #{ignoreSudokuRecordId,jdbcType=INTEGER}
    order by start_time desc
  </select>

  <select id="selectAverageSpendTimeRanking" resultMap="RankItemBOMap">
    WITH tmp as (
      select user_id,
             sudoku_level_id,
             username,
             avg(TIMESTAMPDIFF(SECOND, start_time, end_time))                                                           as data,
             row_number() over (partition by sudoku_level_id order by avg(TIMESTAMPDIFF(SECOND, start_time, end_time))) as rn
      from normal_game_record_sudoku_record_user_v
      where answer_situation = 0
      group by user_id, sudoku_level_id
      )
    <include refid="SelectRanking"/>
  </select>

  <select id="selectMinSpendTimeRanking" resultMap="RankItemBOMap">
    WITH tmp as (
      select sudoku_level_id,
             username,
             TIMESTAMPDIFF(SECOND, start_time, end_time)                                                           as data,
             row_number() over (partition by sudoku_level_id order by TIMESTAMPDIFF(SECOND, start_time, end_time)) as rn
      from normal_game_record_sudoku_record_user_v
      where answer_situation = 0)
    <include refid="SelectRanking"/>
  </select>

  <select id="selectCorrectNumberRanking" resultMap="RankItemBOMap">
    WITH tmp as (
      select user_id,
             sudoku_level_id,
             username,
             count(1)                                                                as data,
             row_number() over (partition by sudoku_level_id order by count(1) desc) as rn
      from normal_game_record_sudoku_record_user_v
      where answer_situation = 0
      group by user_id, sudoku_level_id
      )
    <include refid="SelectRanking"/>
  </select>

  <select id="selectGameInformationByUserId" resultMap="UserGameInformationVOMap">
    select count(1)                                                                         as total,
           count(answer_situation = 0 or null)                                              as correct_number,
           avg(if(answer_situation = 0, TIMESTAMPDIFF(SECOND, start_time, end_time), null)) as average_spend_time,
           min(if(answer_situation = 0, TIMESTAMPDIFF(SECOND, start_time, end_time), null)) as min_spend_time,
           max(if(answer_situation = 0, TIMESTAMPDIFF(SECOND, start_time, end_time), null)) as max_spend_time,
           sl.name                                                                          as sudoku_level_name
    from normal_game_record_sudoku_record_user_v v
           inner join sudoku_level sl on v.sudoku_level_id = sl.id
    where user_id = #{userId,jdbcType=INTEGER}
    group by sudoku_level_id
  </select>

  <update id="updateInputMatrixAndAnswerSituationBySudokuRecordId">
    update normal_game_record
    set input_matrix=#{inputMatrix,jdbcType=CHAR},
        answer_situation=#{answerSituation,jdbcType=TINYINT}
    where sudoku_record_id = #{sudokuRecordId,jdbcType=INTEGER}
  </update>
</mapper>